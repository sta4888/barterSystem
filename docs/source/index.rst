Портфолио
=========

Веб-сайт для портфолио.
Позволяет публиковать информацию о специалисте, представить результат выполненных проектов, а также вести блог.

Зависимости
===========

Установите требуемое ПО:

1. Docker для контейнеризации – |link_docker|

.. |link_docker| raw:: html

   <a href="https://www.docker.com" target="_blank">Docker Desktop</a>

2. Для работы с системой контроля версий – |link_git|

.. |link_git| raw:: html

   <a href="https://github.com/git-guides/install-git" target="_blank">Git</a>

3. IDE для работы с исходным кодом – |link_pycharm|

.. |link_pycharm| raw:: html

    <a href="https://www.jetbrains.com/ru-ru/pycharm/download" target="_blank">PyCharm</a>

Установка
=========

1. Клонируйте репозиторий проекта в свою рабочую директорию:

    .. code-block:: console

        git clone https://github.com/mnv/python-course-portfolio.git

Перед началом использования приложения необходимо его сконфигурировать.

.. note::

    Для конфигурации выполните команды, описанные ниже, находясь в корневой директории проекта (на уровне с директорией `src`).

2. Скопируйте файл настроек `.env.sample`, создав файл `.env`:
    .. code-block:: console

        cp .env.sample .env

    Этот файл содержит преднастроенные переменные окружения, значения которых будут общими для всего приложения.
    Файл примера (`.env.sample`) содержит набор переменных со значениями по умолчанию.
    Созданный файл `.env` можно настроить в зависимости от окружения.

    .. warning::

        Никогда не добавляйте в систему контроля версий заполненный файл `.env` для предотвращения компрометации информации о конфигурации приложения.

3. Соберите Docker-контейнер с помощью Docker Compose:
    .. code-block:: console

        docker compose build

    Данную команду необходимо выполнять повторно в случае обновления зависимостей в файле `requirements.txt`.

4. После сборки контейнеров можно их запустить командой:
    .. code-block:: console

        docker compose up

    Данная команда запустит собранные контейнеры для приложения и базы данных.
    Когда запуск завершится, сервер начнет работать по адресу `http://0.0.0.0:8000`.

5. Для правильной работы приложения необходимо настроить базу данных (создать в ней таблицы).
    Для этого нужно применить миграции внутри контейнера приложения.
    Данная команда позволит зайти в контейнер приложения:

    .. code-block:: console

        docker compose exec app bash

    Для применения миграций выполните команду:

    .. code-block:: console

        ./manage.py migrate

    После выполнения команды в базе данных будут созданы все нужные таблицы.

Использование
=============

1. Для управления содержимым сайта необходимо создать пользователя-администратора.

    Подключитесь к Docker-контейнеру приложения:

    .. code-block:: console

        docker compose exec app bash

    Выполните команду для создания администратора:

    .. code-block:: console

        ./manage.py createsuperuser

    Последуйте указанием данной команды для создания пользователя-администратора.

2. После создания администратора можно зайти в панель управления сайтом по адресу http://0.0.0.0:8000/admin.

Работа с базой данных
---------------------

При необходимости обновления структуры таблиц в базе данных нужно обновить соответствущие модели (`models.py`)
и выполнить команду для генерации миграций, которые затем следует применить.

Команды выполняются внутри контейнера приложения:

    .. code-block:: console

        docker compose exec app bash

Для генерации миграций:

    .. code-block:: console

        ./manage.py makemigrations

Для применения новых миграций:

    .. code-block:: console

        ./manage.py migrate

    Данная команда обновит структуру таблиц в базе данных в соответствии с моделями.

Автоматизация
=============

Проект содержит специальный файл (`Makefile`) для автоматизации выполнения команд:

1. Сборка Docker-контейнера.
2. Генерация документации.
3. Запуск форматирования кода.
4. Запуск статического анализа кода (выявление ошибок типов и форматирования кода).
5. Запуск автоматических тестов.
6. Запуск всех функций поддержки качества кода (форматирование, линтеры, автотесты).

Инструкция по запуску этих команд находится в файле `README.md`.

Тестирование
============

Для запуска автоматических тестов выполните команду:

.. code-block:: console

    docker compose run app python manage.py test

Также существует аналогичная `make`-команда:

.. code-block:: console

    make test
